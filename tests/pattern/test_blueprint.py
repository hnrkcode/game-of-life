from gameoflife.pattern.blueprint import get_patterns


def test_blueprint_length(patterns):
    assert len(patterns.items()) == 34


def test_blueprint_names():
    patterns = get_patterns()

    cellular_automata_patterns = [
        "1. Still life: Block",
        "2. Still life: Behive",
        "3. Still life: Loaf",
        "4. Still life: Tub",
        "5. Still life: Boat",
        "6. Still life: Carrier",
        "7. Oscillator: Blinker",
        "8. Oscillator: Beacon",
        "9. Oscillator: Pulsar line",
        "10. Oscillator: Pulsar",
        "11. Oscillator: Toad",
        "12. Oscillator: Figure eight",
        "13. Oscillator: Octagon 2",
        "14. Oscillator: Pentadecathlon",
        "15. Oscillator: Spark coil",
        "16. Oscillator: Wheel",
        "17. Spaceship: Lightweight Spaceship",
        "18. Spaceship: Mediumweight Spaceship",
        "19. Spaceship: Heavyweight Spaceship",
        "20. Spaceship: Glider",
        "21. Spaceship: Loafer",
        "22. Spaceship: 25P3H1V0.1",
        "23. Spaceship: Weekender",
        "24. Gun: Gospels glider gun",
        "25. Methuselah: Acorn",
        "26. Methuselah: B-Heptomino",
        "27. Methuselah: Diehard",
        "28. Methuselah: Glider by the dozen",
        "29. Methuselah: Piheptomino",
        "30. Methuselah: Thunderbird",
        "31. Methuselah: GardenofEden",
        "32. Methuselah: Infinite 3",
        "33. Wick: Ants",
        "34. Wick: Blinker Fuse",
    ]

    for actual, expected in zip(patterns.keys(), cellular_automata_patterns):
        assert actual == expected


def test_still_life_pattern_block(patterns):
    assert patterns["1. Still life: Block"] == [[1, 1], [1, 1]]


def test_still_life_pattern_behive(patterns):
    assert patterns["2. Still life: Behive"] == [
        [0, 1, 1, 0],
        [1, 0, 0, 1],
        [0, 1, 1, 0],
    ]


# Repeat the same format for the remaining patterns
def test_still_life_pattern_loaf(patterns):
    assert patterns["3. Still life: Loaf"] == [
        [0, 1, 1, 0],
        [1, 0, 0, 1],
        [0, 1, 0, 1],
        [0, 0, 1, 0],
    ]


def test_still_life_pattern_tub(patterns):
    assert patterns["4. Still life: Tub"] == [[0, 1, 0], [1, 0, 1], [0, 1, 0]]


def test_still_life_pattern_boat(patterns):
    assert patterns["5. Still life: Boat"] == [[1, 1, 0], [1, 0, 1], [0, 1, 0]]


def test_still_life_pattern_carrier(patterns):
    assert patterns["6. Still life: Carrier"] == [
        [1, 1, 0, 0],
        [1, 0, 0, 1],
        [0, 0, 1, 1],
    ]


def test_oscillator_blinker(patterns):
    assert patterns["7. Oscillator: Blinker"] == [[1, 1, 1]]


def test_oscillator_beacon(patterns):
    assert patterns["8. Oscillator: Beacon"] == [
        [1, 1, 0, 0],
        [1, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 0, 1, 1],
    ]


def test_oscillator_pulsar_line(patterns):
    assert patterns["9. Oscillator: Pulsar line"] == [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]


def test_oscillator_pulsar(patterns):
    assert patterns["10. Oscillator: Pulsar"] == [
        [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
        [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
    ]


def test_oscillator_toad(patterns):
    assert patterns["11. Oscillator: Toad"] == [[0, 1, 1, 1], [1, 1, 1, 0]]


def test_oscillator_figure_eight(patterns):
    assert patterns["12. Oscillator: Figure eight"] == [
        [1, 1, 0, 0, 0, 0],
        [1, 1, 0, 1, 0, 0],
        [0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0],
        [0, 0, 1, 0, 1, 1],
        [0, 0, 0, 0, 1, 1],
    ]


def test_oscillator_octagon_2(patterns):
    assert patterns["13. Oscillator: Octagon 2"] == [
        [0, 0, 0, 1, 1, 0, 0, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 1],
        [0, 1, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [0, 0, 0, 1, 1, 0, 0, 0],
    ]


def test_oscillator_pentadecathlon(patterns):
    assert patterns["14. Oscillator: Pentadecathlon"] == [
        [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
        [1, 1, 0, 1, 1, 1, 1, 0, 1, 1],
        [0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    ]


def test_oscillator_spark_coil(patterns):
    assert patterns["15. Oscillator: Spark coil"] == [
        [1, 1, 0, 0, 0, 0, 1, 1],
        [1, 0, 1, 0, 0, 1, 0, 1],
        [0, 0, 1, 0, 0, 1, 0, 0],
        [1, 0, 1, 0, 0, 1, 0, 1],
        [1, 1, 0, 0, 0, 0, 1, 1],
    ]


def test_oscillator_wheel(patterns):
    assert patterns["16. Oscillator: Wheel"] == [
        [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
        [1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
        [1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1],
        [0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1],
        [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
    ]


def test_spaceship_lightweight_spaceship(patterns):
    assert patterns["17. Spaceship: Lightweight Spaceship"] == [
        [0, 1, 0, 0, 1],
        [1, 0, 0, 0, 0],
        [1, 0, 0, 0, 1],
        [1, 1, 1, 1, 0],
    ]


def test_spaceship_mediumweight_spaceship(patterns):
    assert patterns["18. Spaceship: Mediumweight Spaceship"] == [
        [0, 0, 0, 1, 0, 0],
        [0, 1, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 0],
    ]


def test_spaceship_heavyweight_spaceship(patterns):
    assert patterns["19. Spaceship: Heavyweight Spaceship"] == [
        [0, 0, 0, 1, 1, 0, 0],
        [0, 1, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0],
        [1, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 0],
    ]


def test_spaceship_glider(patterns):
    assert patterns["20. Spaceship: Glider"] == [[0, 1, 0], [0, 0, 1], [1, 1, 1]]


def test_spaceship_loafer(patterns):
    assert patterns["21. Spaceship: Loafer"] == [
        [0, 1, 1, 0, 0, 1, 0, 1, 1],
        [1, 0, 0, 1, 0, 0, 1, 1, 0],
        [0, 1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 1, 1, 1],
        [0, 0, 0, 0, 0, 1, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 1, 1],
    ]


def test_spaceship_25P3H1V0_1(patterns):
    assert patterns["22. Spaceship: 25P3H1V0.1"] == [
        [0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0],
        [0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0],
        [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    ]


def test_spaceship_weekender(patterns):
    assert patterns["23. Spaceship: Weekender"] == [
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
        [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
        [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0],
    ]


def test_gun_Gospels_glider_gun(patterns):
    assert patterns["24. Gun: Gospels glider gun"] == [
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
        ],
        [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        [
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
    ]


def test_methuselah_acorn(patterns):
    assert patterns["25. Methuselah: Acorn"] == [
        [0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 1, 0, 0, 0],
        [1, 1, 0, 0, 1, 1, 1],
    ]


def test_methuselah_B_Heptomino(patterns):
    assert patterns["26. Methuselah: B-Heptomino"] == [
        [1, 0, 1, 1],
        [1, 1, 1, 0],
        [0, 1, 0, 0],
    ]


def test_methuselah_diehard(patterns):
    assert patterns["27. Methuselah: Diehard"] == [
        [0, 0, 0, 0, 0, 0, 1, 0],
        [1, 1, 0, 0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0, 1, 1, 1],
    ]


def test_methuselah_glider_by_the_dozen(patterns):
    assert patterns["28. Methuselah: Glider by the dozen"] == [
        [1, 1, 0, 0, 1],
        [1, 0, 0, 0, 1],
        [1, 0, 0, 1, 1],
    ]


def test_methuselah_Piheptomino(patterns):
    assert patterns["29. Methuselah: Piheptomino"] == [[1, 1, 1], [1, 0, 1], [1, 0, 1]]


def test_methuselah_thunderbird(patterns):
    assert patterns["30. Methuselah: Thunderbird"] == [
        [1, 1, 1],
        [0, 0, 0],
        [0, 1, 0],
        [0, 1, 0],
        [0, 1, 0],
    ]


def test_methuselah_GardenofEden(patterns):
    assert patterns["31. Methuselah: GardenofEden"] == [
        [0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0],
        [0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0],
        [0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1],
        [0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1],
        [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1],
        [0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0],
        [0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0],
        [1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0],
        [1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    ]


def test_methuselah_Infinite_3(patterns):
    assert patterns["32. Methuselah: Infinite 3"] == [
        [
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            1,
            1,
        ]
    ]


def test_wick_Ants(patterns):
    assert patterns["33. Wick: Ants"] == [
        [
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
        ],
        [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
        ],
        [
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
        ],
        [
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
        ],
    ]


def test_wick_Blinker_Fuse(patterns):
    assert patterns["34. Wick: Blinker Fuse"] == [
        [
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        [
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
            0,
            1,
            1,
            1,
        ],
        [
            1,
            1,
            1,
            1,
            1,
            0,
            1,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        [
            1,
            1,
            0,
            0,
            1,
            0,
            1,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
    ]
